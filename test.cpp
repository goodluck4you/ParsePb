//
// Created by 28264 on 2023/6/10.
//

#include "gtest/gtest.h"
#include "ProtobufHelper.h"


TEST(PROTOBUF_TEST, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0xf0,0x0d,0x00,0x00,0x10,0x08,0x00,0x00,0x04,0x34,0x00,0x00,0x00,0x5f,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x14,0x3b,0x39,0x67,0x08,0x00,0x81,0x00,0x00,0x00,0x05,0x73,0x6f,0x73,0x6f,0x0a,0x00,0x41,0x4b,0x73,0xbd,0x72,0x09,0x00,0x90,0x00,0x00,0x07,0x69,0x50,0x68,0x6f,0x6e,0x65,0x0b,0x00,0x51,0x00,0x46,0xa9,0x3e,0x0c,0x09,0x00,0xf0,0x06,0x00,0x00,0x13,0xe5,0xa4,0xaa,0xe9,0x98,0xb3,0xe7,0x85,0xa7,0xe5,0xb8,0xb8,0xe5,0x8d,0x87,0xe8,0xb5,0xb7,0x17,0x00,0x51,0x00,0x12,0x18,0x54,0x03,0x09,0x00,0x62,0x00,0x00,0x0d,0x62,0x69,0x75,0x03,0x00,0x30,0xef,0xbd,0x9e,0x11,0x00,0x40,0x00,0x18,0xfa,0x63,0x7c,0x00,0x00,0x02,0x00,0xf0,0x02,0x11,0xe6,0x95,0xb0,0xe6,0x8d,0xae,0xe9,0x87,0x87,0xe9,0x9b,0x86,0x74,0x65,0x73,0x74,0x15,0x00,0x51,0x00,0x28,0xb4,0xff,0x9c,0x09,0x00,0xf0,0x06,0x00,0x00,0x13,0x2f,0x2f,0x2f,0xe6,0x97,0xa0,0xe6,0x83,0x85,0xe6,0x97,0xa0,0xe4,0xb9,0x89,0x40,0x40,0x40,0x17,0x00,0x51,0x00,0x6a,0xd1,0xd3,0xf4,0x09,0x00,0xb0,0x00,0x00,0x04,0xe5,0x93,0x8e,0x00,0x00,0x00,0x00,0x00,0x74,0x73,0x66,0x34,0x67,0x06};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);

    std::cout<<json.dump()<<std::endl;
}
TEST(PROTOBUF_TEST2, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0x0a,0xab,0x01,0x12,0x12,0x31,0x36,0x37,0x39,0x34,0x37,0x33,0x33,0x33,0x37,0x36,0x35,0x32,0x38,0x33,0x30,0x37,0x39,0x2a,0x94,0x01,0x08,0x01,0x12,0x08,0x32,0x36,0x34,0x30,0x38,0x36,0x38,0x33,0x1a,0x07,0x36,0x30,0x37,0x38,0x36,0x32,0x33,0x20,0xb8,0xd6,0xa5,0xc3,0xf0,0x30,0x3a,0x76,0x0d,0x00,0x00,0x87,0x44,0x15,0x00,0x00,0xf0,0x44,0x1a,0x6a,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x63,0x68,0x69,0x6e,0x61,0x2d,0x63,0x68,0x61,0x74,0x2d,0x69,0x6d,0x67,0x2e,0x73,0x6f,0x75,0x6c,0x61,0x70,0x70,0x2e,0x63,0x6e,0x2f,0x69,0x6d,0x61,0x67,0x65,0x2f,0x32,0x30,0x32,0x33,0x2d,0x30,0x33,0x2d,0x32,0x32,0x2f,0x31,0x62,0x61,0x32,0x39,0x66,0x35,0x63,0x2d,0x35,0x39,0x30,0x34,0x2d,0x34,0x62,0x61,0x62,0x2d,0x62,0x37,0x39,0x37,0x2d,0x35,0x33,0x31,0x37,0x39,0x64,0x38,0x65,0x30,0x30,0x35,0x61,0x2d,0x31,0x36,0x37,0x39,0x34,0x37,0x33,0x33,0x33,0x37,0x37,0x33,0x33,0x2e,0x6a,0x70,0x65,0x67,0x0a,0x22,0x18,0x03,0x42,0x1e,0x12,0x0d,0x31,0x36,0x37,0x39,0x34,0x37,0x33,0x33,0x33,0x39,0x32,0x30,0x30,0x1a,0x0d,0x31,0x36,0x37,0x39,0x34,0x37,0x33,0x33,0x33,0x39,0x31,0x39,0x32};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);

    std::string str=json.dump();
    std::cout<<str<<std::endl;
    JSON ret= JSON::parse(R"(
{"1":
   [{
     "2":"167947333765283079",
     "5":{"1":1,"2":"26408683",
        "3":"6078623",
        "4":1679473339192,
        "7":{
            "1":1149698048,
            "2":1156579328,
            "3":"https://china-chat-img.soulapp.cn/image/2023-03-22/1ba29f5c-5904-4bab-b797-53179d8e005a-1679473337733.jpeg"}}},
   {
     "3":3,
      "8":
        {
       "2":"1679473339200",
       "3":"1679473339192"
        }
  }]
}
)");

    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_Fix32_Fix64, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0x09,0x69,0xb6,0x01,0x00,0x00,0x00,0x00,0x00,0x15,0x01,0x00,0x00,0x00};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);

    JSON ret= JSON::parse(R"(
{"1":112233,
"2":1}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_Repeat2, Trivial) {

    ProtobufHelper helper;       //这里构造一个特殊的0x0a
    uint8_t pb_data[]={0x1a,0x04,0x0a,0x16,0xcd,0x02,0x00,0x00,0x00,0x00,0x00,0x00};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{"3":"0a16cd02"}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_Repeat, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0x1a,0x04,0x0b,0x16,0xcd,0x02,0x00,0x00,0x00,0x00,0x00,0x00};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{"3":"0b16cd02"}
)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_String, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0x2a,0x08,0x31,0xe4,0xb8,0xad,0x7a,0x7a,0x68,0x75};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret= JSON::parse(R"(
{"5":"1中zzhu"}
)");
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_ChildMessage, Trivial)
{
    ProtobufHelper helper;
    uint8_t pb_data[]={0x15,0x16,0x00,0x00,0x00,0x3a,0x0a,0x08,0x0a,0x12,0x06,0x7a,0x68,0x75,0xe4,0xb8,0xad};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
    JSON ret=R"(
  {
    "2": 22,
    "7":
        {
            "1":10,
            "2":"zhu中"
        }
  }
)"_json;
    std::string str=ret["7"]["2"];
//    std::string str=json.dump();
//    std::cout<<str<<std::endl;
    ASSERT_EQ(json,ret);
}
TEST(PROTOBUF_TEST_Bytes, Trivial)
{

    ProtobufHelper helper;
    uint8_t pb_data[]={0x32,0x04,0xa,0x0a,0x03,0x04};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);
//    JSON ret= json::parse(R"(
//{"2":22,"7":{"1":10,"2":"zhu中"}}
//)");
    std::string str=json.dump();
    std::cout<<str<<std::endl;
//    ASSERT_EQ(json,ret);
}
//int main(){
//    SetConsoleOutputCP(65001);
//
//    JSON js;
//    js["1"]={{"key","value"}};
//    auto arry_is=js["1"].is_array();
//    js["1"].push_back({{"key2","value2"}});
//    std::cout<<js.dump()<<std::endl;
//
//
//}